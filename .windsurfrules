# 单元测试说明

- **理解被测试代码**：
  - **深入阅读**：确保充分理解被测试项目的源代码及其目录结构。例如，若需测试项目 A 的 `Person.cs` 文件，应了解项目 A 中相关的其他代码文件（如 `Laborer.cs`）及其目录结构。
  - **分析项目依赖**：检查项目 A 是否依赖于其他项目（如项目 B）。如果项目 A 继承了项目 B 的 `Person.cs` 类，则需重点分析项目 B 的相关源代码。
  - **深入理解依赖项目**：阅读依赖项目（如项目 B）的所有相关代码，分析其整体目录结构，以明确其功能实现及与项目 A 的关系。

- **创建单元测试项目**：
  - **遵循目录结构**：根据被测试源代码的目录结构创建对应的测试项目。例如，若 `Tenon.Infra.Redis.StackExchangeProvider` 项目位于 `Infrastructures` 文件夹下，则单元测试项目应在 `Tests` 文件夹下创建一个 `Infrastructures` 文件夹。
  - **命名规范**：在 `Tests/Infrastructures` 文件夹中创建名为 `Tenon.Infra.Redis.StackExchangeProvider.Tests` 的单元测试项目，确保测试项目与被测试项目的命名一致，并以 `.Tests` 后缀区分。

- **依赖管理**：
  - **创建 .NET 9 单元测试项目**：确保使用 .NET 9 创建单元测试项目，并安装以下 NuGet 包（使用最新版本）：
    - `Microsoft.Extensions.DependencyInjection`
    - `MSTest.TestFramework`
  - **配置选项类**：针对包含选项类（如 `RedisOptions`）的项目，确保通过新建或修改 `appsettings.json` 文件，使用 `Microsoft.Extensions.Configuration` NuGet 包来加载初始化。

- **使用扩展方法**：
  - **分析 Extensions 文件夹**：在被测试源代码根目录下的 `Extensions` 文件夹中，分析所有代码文件，优先使用 `ServiceCollectionExtensions` 方式添加服务功能。

- **使用 IoC 容器注入和获取服务**：
  - **依赖注入**：在单元测试中，通过依赖注入（IoC）容器获取服务，而非直接实例化对象。通过容器注入，可以轻松替换或模拟服务，提升测试的灵活性和可维护性。确保测试类的依赖通过构造函数注入，使用 IoC 容器管理服务生命周期，以确保测试环境与生产环境的一致性，简化测试代码的编写，并提高代码的扩展性和测试覆盖率。

- **禁止修改被测试源代码**：
  - **保持源代码稳定性**：在进行单元测试时，任何情况下都禁止主动修改新增被测试的源代码。所有测试问题的修复应仅通过调整测试代码或测试环境配置来完成，以确保源代码的稳定性和可维护性。此原则有助于避免引入新的问题，确保被测试代码在测试期间保持不变，从而提高测试的可靠性和准确性。

- **修复单元测试问题**：
  - **定位错误**：在修复单元测试编译或测试问题时，首先定位到具体的错误方法，确保仅修改该方法内的代码，避免修改无关方法，以防引入额外的 bug。

- **添加注释**：
  - **注释重要性**：在编写单元测试时，添加清晰简洁的注释至关重要。注释应明确测试方法的目的、预期行为及测试的边界情况，帮助其他开发者或未来的自己快速理解测试逻辑。特别是对复杂的测试场景或不直观的测试步骤，需要提供详细的解释。注释应包含以下内容：
    1. **测试目的**：说明测试的功能点和目标。
    2. **测试数据和前置条件**：描述测试中使用的假设数据和必要的环境准备。
    3. **预期结果**：清晰地标明期望的行为或结果。
    4. **断言解释**：对断言的原因进行说明，确保其与业务逻辑匹配。
    5. **边界情况**：针对可能的极限值或异常情况，提供详细的测试说明。

- **其他**：
   始终保持单元测试代码的可读性、可维护性和可测试性，以确保代码的质量和可靠性。
   始终使用中文回复。
