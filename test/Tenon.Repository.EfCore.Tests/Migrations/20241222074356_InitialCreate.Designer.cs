// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tenon.Repository.EfCore.Tests;

#nullable disable

namespace Tenon.Repository.EfCore.Tests.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20241222074356_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("BlogBlogTag", b =>
                {
                    b.Property<long>("BlogsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BlogsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("BlogBlogTag");
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.Tests.Entities.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1)
                        .HasComment("主键ID");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(94)
                        .HasComment("删除时间");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(95)
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnOrder(2)
                        .HasComment("是否已删除");

                    b.Property<int>("LikeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReadCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Blog_IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Blogs", t =>
                        {
                            t.HasComment("Blog表");
                        });
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.Tests.Entities.BlogComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1)
                        .HasComment("主键ID");

                    b.Property<long>("BlogId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commenter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(94)
                        .HasComment("删除时间");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(95)
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnOrder(2)
                        .HasComment("是否已删除");

                    b.Property<int>("LikeCount")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_BlogComment_IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ParentId");

                    b.ToTable("BlogComments", t =>
                        {
                            t.HasComment("BlogComment表");
                        });
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.Tests.Entities.BlogTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1)
                        .HasComment("主键ID");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BlogTags", t =>
                        {
                            t.HasComment("BlogTag表");
                        });
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.Tests.Entities.ConcurrentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1)
                        .HasComment("主键ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasComment("行版本号，用于并发控制");

                    b.HasKey("Id");

                    b.ToTable("ConcurrentEntities", t =>
                        {
                            t.HasComment("ConcurrentEntity表");
                        });
                });

            modelBuilder.Entity("BlogBlogTag", b =>
                {
                    b.HasOne("Tenon.Repository.EfCore.Tests.Entities.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenon.Repository.EfCore.Tests.Entities.BlogTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.Tests.Entities.BlogComment", b =>
                {
                    b.HasOne("Tenon.Repository.EfCore.Tests.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tenon.Repository.EfCore.Tests.Entities.BlogComment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Blog");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.Tests.Entities.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.Tests.Entities.BlogComment", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
