// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tenon.Repository.EfCore.SqliteTests;

#nullable disable

namespace Tenon.Repository.EfCore.SqliteTests.Migrations
{
    [DbContext(typeof(SqliteTestDbContext))]
    partial class SqliteTestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("Tenon.Repository.EfCore.SqliteTests.Entities.Blog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<long>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("blogs", (string)null);
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.SqliteTests.Entities.Post", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<long>("BlogId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("Id");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.SqliteTests.Entities.Post", b =>
                {
                    b.HasOne("Tenon.Repository.EfCore.SqliteTests.Entities.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Tenon.Repository.EfCore.SqliteTests.Entities.Blog", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
